{"version":3,"sources":["Cardd.js","CardList.js","Scroll.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Cardd","name","email","id","randomid","Math","floor","random","className","style","width","alt","src","CradList","robots","map","user","i","key","Scroll","props","overflow","border","height","children","Nav","searchfield","searchChange","type","placeholder","onChange","App","useState","setRobots","setSearchfield","refresh","setRefresh","useEffect","fetch","then","response","json","console","log","filtered","filter","toLowerCase","includes","event","searchlistener","target","value","onClick","CardList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPAkBeA,EAfD,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,MAAQC,EAAO,EAAPA,GACrBC,EAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,UACnC,OAEA,yBAAKC,UAAW,iDAAiDC,MAAO,CAAEC,MAAO,UACjF,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BR,EAASD,EAAnC,cACjB,4BAAKF,GACL,2BAAIC,KCOMW,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAOpB,OANkBA,EAAOC,KAAI,SAACC,EAAMC,GAClC,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EACnBd,GAAMW,EAAOG,GAAGd,GAChBF,KAAOa,EAAOG,GAAGhB,KAChBC,MAAQY,EAAOG,GAAGf,YCANiB,G,WARA,SAACC,GACd,OACE,yBAAKX,MAAO,CAAEY,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEH,EAAMI,YCOEC,EAVJ,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aACzB,OACC,yBAAKnB,UAAW,OACjB,2BAAOA,UAAU,kCAAkCoB,KAAK,SACvDC,YAAY,gBACZC,SAAUH,MCoEII,MAhEf,WAAc,MAcmBC,mBAAS,IAd5B,mBAcHlB,EAdG,KAcMmB,EAdN,OAe6BD,mBAAS,IAftC,mBAeHN,EAfG,KAeWQ,EAfX,OAgBqBF,mBAAS,GAhB9B,mBAgBHG,EAhBG,KAgBOC,EAhBP,KAwBZC,qBAAU,WACFC,MAAM,8CACPC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAvB,GAAI,OAAGiB,EAAUjB,MACvB0B,QAAQC,IAAIR,KACf,CAACA,IACF,IAMSS,EAAW9B,EAAO+B,QAAO,SAAA/B,GAChC,OAAOA,EAAOb,KAAK6C,cAAcC,SAASrB,EAAYoB,kBAEpD,OAEA,yBAAKtC,UAAW,MAGd,+CACA,iEACC,kBAAC,EAAD,CAAKmB,aAhBW,SAACqB,GACtB,IAAMC,EAAiBD,EAAME,OAAOC,MACpCjB,EAAee,MAeV,4BAAQG,QAAS,kBAAKhB,EAAWD,EAAQ,IAAI3B,UAAU,+CAAvD,kBAGE,kBAAC,EAAD,KACD,kBAAC6C,EAAD,CAAUvC,OAAQ8B,OClDVU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,MACDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.e7ce1c8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport  Button  from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nconst  Cardd =({name , email , id})=> {\r\n    const randomid = Math.floor(Math.random() * 100);\r\n\t\treturn(\r\n\r\n\t\t<div className= 'bg-light-blue dib br3 pa3 ma2 grow bw2 shadow5' style={{ width: '18rem' }}>\r\n  <img alt='photo' src={`https://robohash.org/${randomid+id}?200x200` }/>\r\n     <h2>{name}</h2>\r\n     <p>{email}</p>\r\n\r\n\r\n\r\n</div>\r\n);\r\n\t\r\n}\r\nexport default Cardd;","import React from 'react';\r\nimport Cardd from './Cardd';\r\n\r\n\r\n\r\nconst CradList = ({ robots }) => {\r\n\tconst cardLoop = robots.map((user, i ) =>{\r\n\t\treturn <Cardd key={i} \r\n\t\tid = {robots[i].id} \r\n\t\tname ={robots[i].name}\r\n\t\t email= {robots[i].email} />\r\n\t})\r\nreturn cardLoop\r\n}\r\n\r\n\r\n\r\nexport default CradList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Nav =({searchfield,searchChange})=> {\r\nreturn (\r\n\t<div className= 'pa2'>\r\n<input className='bg-light-blue dib br3 pa3 ma2  ' type='search' \r\n\tplaceholder='search robots'\r\n\tonChange={searchChange}/>\r\n\r\n</div>\r\n\t);\r\n}\r\nexport default Nav;","import React,{useState, useEffect} from 'react';\r\nimport CardList from './CardList'\r\nimport {robots} from './robots'\r\nimport 'tachyons';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nimport Nav from './Nav'\r\n// this component used to be a class component and it has been updated to a function component and now it is using the \r\n// React Hooks \r\n\r\nfunction App(){\r\n// constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       robots: [],\r\n//       searchfield:''\r\n//     }\r\n//   }\r\n// componentDidMount(){\r\n//   fetch('https://jsonplaceholder.typicode.com/users')\r\n//   .then(response=> response.json())\r\n//   .then(user=> this.setState({robots:robots}));\r\n\r\n// }\r\n    const [robots , setRobots] = useState([]);\r\n    const [searchfield , setSearchfield] = useState('');\r\n    const [refresh , setRefresh] = useState(0);\r\n\r\n  //  const didMount = useEffect({\r\n  //     fetch('https://jsonplaceholder.typicode.com/users')\r\n  //       .then(response=> response.json())\r\n  //       .then(user=> setRobots({user}));\r\n  //   })\r\n\r\n  useEffect(()=>{\r\n          fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(user=> setRobots(user));\r\n        console.log(refresh);\r\n  }, [refresh])\r\n    const onSearchChange = (event) => {\r\n      const searchlistener = event.target.value;\r\n      setSearchfield(searchlistener);\r\n      \r\n  }\r\n\r\n       const filtered = robots.filter(robots=>{\r\n      return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n        return (\r\n     \r\n        <div className ='tc'>\r\n\r\n        \r\n          <h1> Robot Friends </h1>\r\n          <h2>This React App made By Ahmed Obad</h2>\r\n           <Nav searchChange={onSearchChange}/>\r\n           <button onClick={()=> setRefresh(refresh+1)} className=\"f6 link dim ph3 pv2 mb2 dib white bg-purple\" >Refresh Robots</button>\r\n\r\n           \r\n             <Scroll>\r\n            <CardList robots={filtered} />\r\n          </Scroll>\r\n             \r\n            \r\n             \r\n             \r\n        </div>\r\n    );\r\n\r\n} \r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {robots} from './robots'\r\nimport 'tachyons';\r\n// import Nav from 'Nav.js';\r\nReactDOM.render(\r\n\t\t<App />\r\n,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}